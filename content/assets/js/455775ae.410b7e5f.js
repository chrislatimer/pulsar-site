"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[66028],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=c(t),d=a,g=l["".concat(u,".").concat(d)]||l[d]||m[d]||o;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[l]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const o={id:"txn-use",title:"Get started",sidebar_label:"Get started",description:"Get started to use Pulsar transaction API."},s=void 0,i={unversionedId:"txn-use",id:"txn-use",title:"Get started",description:"Get started to use Pulsar transaction API.",source:"@site/docs/txn-use.md",sourceDirName:".",slug:"/txn-use",permalink:"/docs/next/txn-use",draft:!1,editUrl:"https://github.com/apache/pulsar-site/edit/main/docs/txn-use.md",tags:[],version:"current",frontMatter:{id:"txn-use",title:"Get started",sidebar_label:"Get started",description:"Get started to use Pulsar transaction API."},sidebar:"docsSidebar",previous:{title:"Concept",permalink:"/docs/next/txn-what"},next:{title:"Advanced features",permalink:"/docs/next/txn-advanced-features"}},u={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"Related topics",id:"related-topics",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",n)},l=p("Tabs"),m=p("TabItem"),d={toc:c},g="wrapper";function y(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Pulsar transaction is primarily a server-side and protocol-level feature. This tutorial guides you through every step of how to use the ",(0,a.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/admin/3.3.x/"},"Pulsar transaction API")," to send and receive messages in a Java client."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Currently, ",(0,a.yg)("a",{parentName:"p",href:"https://pulsar.apache.org/api/admin/3.3.x/"},"Pulsar transaction API")," is available in ",(0,a.yg)("strong",{parentName:"p"},"Pulsar 2.8.0 or later")," versions. It is only available for ",(0,a.yg)("strong",{parentName:"p"},"Java"),", ",(0,a.yg)("strong",{parentName:"p"},"Go")," and ",(0,a.yg)("strong",{parentName:"p"},".NET")," clients.")),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/next/getting-started-standalone"},"Start Pulsar 2.8.0 or later versions"))),(0,a.yg)("h2",{id:"steps"},"Steps"),(0,a.yg)("p",null,"To use Pulsar transaction API, complete the following steps."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Enable transactions."),(0,a.yg)("p",{parentName:"li"},"You can set the following configurations in the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/conf/broker.conf"},(0,a.yg)("inlineCode",{parentName:"a"},"broker.conf"))," or ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/apache/pulsar/blob/master/conf/standalone.conf"},(0,a.yg)("inlineCode",{parentName:"a"},"standalone.conf"))," file."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-conf"},"//mandatory configuration, used to enable transaction coordinator\ntransactionCoordinatorEnabled=true\n\n//mandatory configuration, used to create systemTopic used for transaction buffer snapshot\nsystemTopicEnabled=true\n")),(0,a.yg)("admonition",{parentName:"li",type:"note"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("strong",{parentName:"p"},"By default"),", Pulsar transactions are ",(0,a.yg)("strong",{parentName:"p"},"disabled"),"."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Initialize transaction coordinator metadata."),(0,a.yg)("p",{parentName:"li"},"The transaction coordinator can leverage the advantages of partitioned topics (such as load balance)."),(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Input")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"bin/pulsar initialize-transaction-coordinator-metadata -cs 127.0.0.1:2181 -c standalone\n")),(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Output")),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"Transaction coordinator metadata setup success\n"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create a Pulsar client and enable transactions. Since client need to know transaction coordinator from system topic, please make sure your client role has system namespace ",(0,a.yg)("inlineCode",{parentName:"p"},"pulsar/system")," produce/consume permissions.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create producers and consumers.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Produce and receive messages.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Create transactions.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Produce and ack messages with transactions."),(0,a.yg)("admonition",{parentName:"li",type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Currently, messages can be acked individually rather than cumulatively."))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"End transactions."),(0,a.yg)("admonition",{parentName:"li",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"The code snippet below is the example for step 3 - step 8.")),(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Input")))),(0,a.yg)(l,{groupId:"api-choice",defaultValue:"Java",values:[{label:"Java",value:"Java"},{label:"Go",value:"Go"}],mdxType:"Tabs"},(0,a.yg)(m,{value:"Java",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'```java\nPulsarClient client = PulsarClient.builder()\n                // Step 3: create a Pulsar client and enable transactions.\n                .enableTransaction(true)\n                .serviceUrl(jct.serviceUrl)\n                .build();\n\n        // Step 4: create three producers to produce messages to input and output topics.\n        ProducerBuilder<String> producerBuilder = client.newProducer(Schema.STRING);\n        Producer<String> inputProducer = producerBuilder.topic(inputTopic)\n                .sendTimeout(0, TimeUnit.SECONDS).create();\n        Producer<String> outputProducerOne = producerBuilder.topic(outputTopicOne)\n                .sendTimeout(0, TimeUnit.SECONDS).create();\n        Producer<String> outputProducerTwo = producerBuilder.topic(outputTopicTwo)\n                .sendTimeout(0, TimeUnit.SECONDS).create();\n        // Step 4: create three consumers to consume messages from input and output topics.\n        Consumer<String> inputConsumer = client.newConsumer(Schema.STRING)\n                .subscriptionName("your-subscription-name").topic(inputTopic).subscribe();\n        Consumer<String> outputConsumerOne = client.newConsumer(Schema.STRING)\n                .subscriptionName("your-subscription-name").topic(outputTopicOne).subscribe();\n        Consumer<String> outputConsumerTwo = client.newConsumer(Schema.STRING)\n                .subscriptionName("your-subscription-name").topic(outputTopicTwo).subscribe();\n\n        int count = 2;\n        // Step 5: produce messages to input topics.\n        for (int i = 0; i < count; i++) {\n            inputProducer.send("Hello Pulsar! count : " + i);\n        }\n\n        // Step 5: consume messages and produce them to output topics with transactions.\n        for (int i = 0; i < count; i++) {\n\n            // Step 5: the consumer successfully receives messages.\n            Message<String> message = inputConsumer.receive();\n\n            // Step 6: create transactions.\n            // The transaction timeout is specified as 10 seconds.\n            // If the transaction is not committed within 10 seconds, the transaction is automatically aborted.\n            Transaction txn = null;\n            try {\n                txn = client.newTransaction()\n                        .withTransactionTimeout(10, TimeUnit.SECONDS).build().get();\n                // Step 6: you can process the received message with your use case and business logic.\n\n                // Step 7: the producers produce messages to output topics with transactions\n                outputProducerOne.newMessage(txn).value("Hello Pulsar! outputTopicOne count : " + i).send();\n                outputProducerTwo.newMessage(txn).value("Hello Pulsar! outputTopicTwo count : " + i).send();\n\n                // Step 7: the consumers acknowledge the input message with the transactions *individually*.\n                inputConsumer.acknowledgeAsync(message.getMessageId(), txn).get();\n                // Step 8: commit transactions.\n                txn.commit().get();\n            } catch (ExecutionException e) {\n                if (!(e.getCause() instanceof PulsarClientException.TransactionConflictException)) {\n                    // If TransactionConflictException is not thrown,\n                    // you need to redeliver or negativeAcknowledge this message,\n                    // or else this message will not be received again.\n                    inputConsumer.negativeAcknowledge(message);\n                }\n\n                // If a new transaction is created,\n                // then the old transaction should be aborted.\n                if (txn != null) {\n                    txn.abort();\n                }\n            }\n        }\n\n        // Final result: consume messages from output topics and print them.\n        for (int i = 0; i < count; i++) {\n            Message<String> message =  outputConsumerOne.receive();\n            System.out.println("Receive transaction message: " + message.getValue());\n        }\n\n        for (int i = 0; i < count; i++) {\n            Message<String> message =  outputConsumerTwo.receive();\n            System.out.println("Receive transaction message: " + message.getValue());\n        }\n    }\n}\n```\n'))),(0,a.yg)(m,{value:"Go",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'    // Step 3: create a Pulsar client and enable transactions.\n    client, err := pulsar.NewClient(pulsar.ClientOptions{\n        URL:               "<serviceUrl>",\n        EnableTransaction: true,\n    })\n    if err != nil {\n        log.Fatalf("create client fail, err = %v", err)\n    }\n    defer client.Close()\n    // Step 4: create three producers to produce messages to input and output topics.\n    inputTopic := "inputTopic"\n    outputTopicOne := "outputTopicOne"\n    outputTopicTwo := "outputTopicTwo"\n    subscriptionName := "your-subscription-name"\n    inputProducer, _ := client.CreateProducer(pulsar.ProducerOptions{\n        Topic:       inputTopic,\n        SendTimeout: 0,\n    })\n    defer inputProducer.Close()\n    outputProducerOne, _ := client.CreateProducer(pulsar.ProducerOptions{\n        Topic:       outputTopicOne,\n        SendTimeout: 0,\n    })\n    defer outputProducerOne.Close()\n    outputProducerTwo, _ := client.CreateProducer(pulsar.ProducerOptions{\n        Topic:       outputTopicTwo,\n        SendTimeout: 0,\n    })\n    defer outputProducerTwo.Close()\n\n    // Step 4: create three consumers to consume messages from input and output topics.\n    inputConsumer, _ := client.Subscribe(pulsar.ConsumerOptions{\n        Topic:            inputTopic,\n        SubscriptionName: subscriptionName,\n    })\n    defer inputConsumer.Close()\n    outputConsumerOne, _ := client.Subscribe(pulsar.ConsumerOptions{\n        Topic:            outputTopicOne,\n        SubscriptionName: subscriptionName,\n    })\n    defer outputConsumerOne.Close()\n    outputConsumerTwo, _ := client.Subscribe(pulsar.ConsumerOptions{\n        Topic:            outputTopicTwo,\n        SubscriptionName: subscriptionName,\n    })\n    defer outputConsumerTwo.Close()\n\n    // Step 5: produce messages to input topics.\n    ctx := context.Background()\n    count := 2\n    for i := 0; i < count; i++ {\n        inputProducer.Send(ctx, &pulsar.ProducerMessage{\n            Payload: []byte(fmt.Sprintf("Hello Pulsar! count : %d", i)),\n        })\n    }\n    // Step 5: consume messages and produce them to output topics with transactions.\n    for i := 0; i < count; i++ {\n        // Step 5: the consumer successfully receives messages.\n        message, err := inputConsumer.Receive(ctx)\n        if err != nil {\n            log.Printf("receive message from %s fail, err = %v", inputTopic, err)\n            continue\n        }\n        // Step 6: create transactions.\n        // The transaction timeout is specified as 10 seconds.\n        // If the transaction is not committed within 10 seconds, the transaction is automatically aborted.\n        txn, err := client.NewTransaction(10 * time.Second)\n        if err != nil {\n            log.Printf("create txn fail, err = %v", err)\n            continue\n        }\n        // Step 6: you can process the received message with your use case and business logic.\n        // processMessage(message)\n        // Step 7: the producers produce messages to output topics with transactions\n        _, err = outputProducerOne.Send(context.Background(), &pulsar.ProducerMessage{\n            Transaction: txn,\n            Payload:     []byte(fmt.Sprintf("Hello Pulsar! outputTopicOne count : %d", i)),\n        })\n        if err != nil {\n            log.Printf("send to producerOne fail %v", err)\n            txn.Abort(ctx)\n        }\n        _, err = outputProducerTwo.Send(context.Background(), &pulsar.ProducerMessage{\n            Transaction: txn,\n            Payload:     []byte(fmt.Sprintf("Hello Pulsar! outputTopicTwo count : %d", i)),\n        })\n        if err != nil {\n            log.Printf("send to producerTwo fail %v", err)\n            txn.Abort(ctx)\n        }\n        // Step 7: the consumers acknowledge the input message with the transactions *individually*.\n        err = inputConsumer.AckWithTxn(message, txn)\n        if err != nil {\n            log.Printf("ack message fail %v", err)\n            txn.Abort(ctx)\n        }\n        // Step 8: commit transactions.\n        err = txn.Commit(ctx)\n        if err != nil {\n            log.Printf("commit txn fail %v", err)\n        }\n    }\n\n    // Final result: consume messages from output topics and print them.\n    for i := 0; i < count; i++ {\n        message, _ := outputConsumerOne.Receive(ctx)\n        log.Printf("Receive transaction message: %s", string(message.Payload()))\n    }\n    for i := 0; i < count; i++ {\n        message, _ := outputConsumerTwo.Receive(ctx)\n        log.Printf("Receive transaction message: %s", string(message.Payload()))\n    }\n')))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"**Output**\n\n```java\nReceive transaction message: Hello Pulsar! count : 1\nReceive transaction message: Hello Pulsar! count : 2\nReceive transaction message: Hello Pulsar! count : 1\nReceive transaction message: Hello Pulsar! count : 2\n```\n")),(0,a.yg)("h2",{id:"related-topics"},"Related topics"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"To learn more features that can be used with transactions, see ",(0,a.yg)("a",{parentName:"li",href:"/docs/next/txn-advanced-features"},"Pulsar transactions - Advanced features"),".")))}y.isMDXComponent=!0}}]);